---
title: "Read data and clean up"
author: "Alan Jackson"
format: html
editor: source
---

##    Read files, project, and post on map

Read files in, and split into path and collection points
Run some simple stats on collection points
Project the data
Create a 25 m corridor around the path
Are there collection points outside that corridor?
If so create 10 meter circles around them, and do a union with corridor
Create a 5 m grid in the area
Using 20 m mean filter, populate grid
Contour and plot

```{r}

# setup

library(tidyverse)

googlecrs <- 4326
Seattle <- "EPSG:2285"

path <- "/home/ajackson/Dropbox/Rprojects/TrashTracker/data/"


```

##        Read in all the files

Read in files
split
generate stats

```{r}

#   Read in the files

in_files <- list.files( path=paste0(path), pattern=".gpx", full.names=TRUE )
df <- NULL

for (afile in in_files) {
  print(afile)
  
  foo <- XML::htmlTreeParse(afile , useInternalNodes = TRUE)
  t_coords <- XML::xpathSApply(doc = foo, path = "//trkpt", fun = XML::xmlAttrs)
  t_datetime <- XML::xpathSApply(doc = foo, path = "//trkpt/time", fun = XML::xmlValue)
  t_elevation <- XML::xpathSApply(doc = foo, path = "//trkpt/ele", fun = XML::xmlValue)
  ways <- XML::xpathSApply(doc = foo, path = "//wpt", fun = XML::xmlAttrs)
  wpt_type <- XML::xpathSApply(doc = foo, path = "//wpt/name", fun = XML::xmlValue)
  elevation <- XML::xpathSApply(doc = foo, path = "//wpt/ele", fun = XML::xmlValue)
  wy_datetime <- XML::xpathSApply(doc = foo, path = "//wpt/time", fun = XML::xmlValue)
  
  #   waypoints first
  foo <- data.frame(
    lat = as.numeric(ways["lat", ]),
    lon = as.numeric(ways["lon", ]),
    waypt = wpt_type,
    elevation = as.numeric(elevation),
    dt = lubridate::ymd_hms(wy_datetime)
  )
  
  df <- rbind(df, foo)
  
  #   Now track points
  foo <- data.frame(
    lat = as.numeric(t_coords["lat", ]),
    lon = as.numeric(t_coords["lon", ]),
    waypt = NA,
    elevation = as.numeric(t_elevation),
    dt = lubridate::ymd_hms(t_datetime)
  )
  
  df <- rbind(df, foo)
}

df <- df %>% 
  arrange(dt) %>% 
  mutate(Date=as.character(date(dt)))

```

```{r}

#   Make some plots

df %>% 
  filter(!is.na(waypt)) %>% 
  filter(!waypt=="glass") %>% 
  ggplot(aes(x=waypt)) +
  geom_bar() +
  labs(title="May 16 - June 26 Trash Collection",
       x="Item class")

df %>% 
  filter(!is.na(waypt)) %>% 
  filter(!waypt=="glass") %>% 
  filter(dt>lubridate::mdy("06/19/2024")) %>% 
  ggplot(aes(x=waypt)) +
  geom_bar() +
  labs(title="June 20 - July 26 Trash Collection",
       x="Item class")

```

##        Map

```{r}

#   distance function

Eucl <- function(x1, x2, y1, y2){sqrt((x1-x2)**2 + (y1-y2)**2)}

#   Make sf files

df_sf <- sf::st_as_sf(df, coords=c("lon","lat"), crs=googlecrs)

#   Project to UTM

df_utm <- sf::st_transform(df_sf, crs=Seattle)

df_utm <-
  df_utm %>% 
  mutate(X=sf::st_coordinates(.)[,1],
         Y=sf::st_coordinates(.)[,2]) %>% 
  mutate(Distance_L=Eucl(lag(X, default=first(X)), X, # left distance
                       lag(Y, default=first(Y)), Y)) %>% 
  mutate(Distance_R=Eucl(lead(X, default=last(X)), X, # right distance
                       lead(Y, default=last(Y)), Y)) %>% 
  mutate(Delta_dist=pmin(Distance_L, Distance_R))

#   Spike filter

Spike <- 500 # Delta_dist threshhold for declaring a spike (feet)

for (i in 1:nrow(df_utm)) {
  if (df_utm[i,]$Delta_dist>600) {
    NewX <- (df_utm[i-1,]$X + df_utm[i+1,]$X)/2
    NewY <- (df_utm[i-1,]$Y + df_utm[i+1,]$Y)/2
    new_point <- sf::st_point(c(NewX, NewY)) %>% 
                 sf::st_sfc(crs = Seattle)
    df_utm[i,]$geometry <- sf::st_sfc(sf::st_geometry(new_point))
  }
}

#   Turn into a set of lines

l <- df_utm %>% 
  group_by(Date) %>% 
  summarize(do_union=FALSE) %>% 
  sf::st_cast("LINESTRING")

#   Smooth

ls <- smoothr::smooth(sf::st_geometry(l), method = "ksmooth",
                      smoothness=10)

#   Plot th results

l %>% 
  ggplot() +
  geom_sf(aes(color="red")) +
  geom_sf(data=ls)

# Note that segmentize doesn't slice a line
# Instead, it seems to just increases the number of vertices
sls <- st_segmentize(ls, 50)
slsp <- st_cast(sls, "POINT")
plot(st_geometry(slsp), col = cols, main = "segmented line vertices")


```

##### Reprex

```{r}
library(tidyverse)

googlecrs <- 4326
Seattle <- "EPSG:2285"
Seattle <- "EPSG:32610"

df_test <- tribble( ~lat,       ~lon,    ~waypt,
 47.66206, -122.3062,     "Misc",  
 47.66186, -122.3066,  "plastic",  
 47.66170, -122.3064,  "plastic",  
 47.66205, -122.3062, "paper ff",  
 47.66168, -122.3067,  "plastic",  
 47.66203, -122.3062,     "mask"  
)

df_sf_test <- sf::st_as_sf(df_test, coords=c("lon","lat"), crs=googlecrs)

sf::st_transform(df_sf_test, crs=Seattle)


```















